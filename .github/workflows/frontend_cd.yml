name: 🦦 Frontend CD

on:
  push:
    branches: ['main']

  pull_request:
    types: [closed]
    branches: ['main']

permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: frontend-cd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  CF_DISTRIBUTION_ID: ${{ vars.CF_DISTRIBUTION_ID }}

jobs:
  deploy:
    name: 🚀 Deploy to S3 + CloudFront
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: '⚡ Setup Node (cache=yarn)'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: '**/yarn.lock'

      - name: 📦 Install & Build
        run: |
          yarn install --frozen-lockfile
          yarn build

      - name: 🔐 Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::677273281506:role/hana-ieum-github-action-role
          aws-region: ${{ env.AWS_REGION }}

      - name: 📤 Upload static assets (1y cache)
        run: |
          aws s3 sync dist/ s3://$S3_BUCKET \
            --exclude "*.html" \
            --cache-control "public,max-age=31536000,immutable" \
            --delete

      - name: 📤 Upload HTML (short cache)
        run: |
          aws s3 sync dist/ s3://$S3_BUCKET \
            --exclude "*" --include "*.html" \
            --cache-control "public,max-age=60"

      - name: 🧹 Invalidate index & root
        if: env.CF_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CF_DISTRIBUTION_ID \
            --paths "/index.html" "/"

      - name: ✅ Post success comment
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = "🚀 CD 성공!";
            const { owner, repo } = context.repo;
            const sha = context.sha;
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: sha });
            if (prs.data.length) {
              await github.rest.issues.createComment({ owner, repo, issue_number: prs.data[0].number, body });
            } else {
              await github.rest.repos.createCommitComment({ owner, repo, commit_sha: sha, body });
            }

      - name: ❌ Post failure comment
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = "🔥 CD 실패 ㅠㅠ\n\n자세한 로그는 Actions에서 확인해주세요.";
            const { owner, repo } = context.repo;
            const sha = context.sha;
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: sha });
            if (prs.data.length) {
              await github.rest.issues.createComment({ owner, repo, issue_number: prs.data[0].number, body });
            } else {
              await github.rest.repos.createCommitComment({ owner, repo, commit_sha: sha, body });
            }
